"""
Django settings for modelproject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from dotenv import load_dotenv
load_dotenv(override=True)   # BASE_DIR/.env 를 자동 로드


import pymysql

pymysql.install_as_MySQLdb()

from pathlib import Path


# 환경변수 설정
from decouple import config

SECRET_KEY = config("SECRET_KEY")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "debug_toolbar",  # 디버깅 툴바
    "drf_spectacular",  # API 문서화
    "rest_framework_simplejwt",
    'rest_framework_simplejwt.token_blacklist',
    "accounts.apps.AccountsConfig",
    'couponbook.apps.CouponbookConfig',
    "utils",
    "data_api",
    "django_filters",
    "corsheaders",
    "storages",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "modelproject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "modelproject.wsgi.application"

REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    # Parser
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
}

# drf-spectacular 설정

SPECTACULAR_SETTINGS = {
    "TITLE": "쿠폰북 서비스 백엔드 API 문서",
    "DESCRIPTION": "쿠폰북 서비스의 백엔드 API 문서입니다. 엔드포인트와 HTTP 메소드, 매개변수 정보, 요청 본문 스키마, 응답 스키마, 응답 예제 등을 제공합니다.",
    "VERSION": "dev",
    "SERVE_INCLUDE_SCHEMA": False,
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS: list[dict[str, str]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "/static"  # docker-compose: ./static:/app/static

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_USER_MODEL = "accounts.User"

import os

AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME      = os.getenv("AWS_S3_REGION_NAME")
AWS_ACCESS_KEY_ID       = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY   = os.getenv("AWS_SECRET_ACCESS_KEY")

# S3 공통
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_FILE_OVERWRITE = False          # 같은 이름으로 덮어쓰기 방지(특히 media)
AWS_DEFAULT_ACL = None                 # 기본 ACL 끄기(권장)
AWS_QUERYSTRING_AUTH = True            # media는 presigned URL
AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}

# URL 구성
AWS_S3_CUSTOM_DOMAIN = None  # CloudFront 쓰면 여기에 도메인

STATIC_LOCATION = os.getenv("STATIC_LOCATION", "static-dev")

# Django 4.2+ : STORAGES 방식
STORAGES = {
    # 업로드 미디어(비공개) → presigned URL 로 접근
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "region_name": AWS_S3_REGION_NAME,
            "location": "media",
            "custom_domain": AWS_S3_CUSTOM_DOMAIN,
        },
    },
    # 정적 파일(공개 읽기) → collectstatic 시 S3로 업로드
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "region_name": AWS_S3_REGION_NAME,
            "location": STATIC_LOCATION,
            "custom_domain": AWS_S3_CUSTOM_DOMAIN,
            "querystring_auth": False,
        },
    },
}
# settings_base.py
STATICFILES_DIRS = [ BASE_DIR / "static-dev" ]  # 루트/static을 수집 대상으로 추가


STORAGES["staticfiles"]["OPTIONS"]["location"] = STATIC_LOCATION
# (선택) 정적/미디어 URL
# 공개 static: 아래처럼 고정 URL로 접근(버킷을 퍼블릭 읽기로 설정했을 때)
STATIC_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/{STATIC_LOCATION}/"
# 비공개 media는 presigned URL 이므로 MEDIA_URL 설정은 보통 생략(필요시만 지정)


# STORAGES = {
#     "default": {
#         "BACKEND": "storages.backends.s3.S3Storage",
#         "OPTIONS": {
#             # 여기에 S3 관련 옵션들을 설정
#         },
#     },
#     "staticfiles": {
#         "BACKEND": "storages.backends.s3.S3Storage",
#     },
# }

# # 선택적 설정
# AWS_DEFAULT_ACL = None  # 파일이 private으로 설정됨 (보안상 권장)
# AWS_S3_CUSTOM_DOMAIN = None  # CloudFront 도메인 사용 시 설정
# AWS_S3_OBJECT_PARAMETERS = {
#     'CacheControl': 'max-age=86400',
# }
# AWS_LOCATION = 'media'  # 파일들이 저장될 폴더 (옵션)

# # URL 관련 설정
# AWS_QUERYSTRING_AUTH = True  # 서명된 URL 사용 여부
# AWS_QUERYSTRING_EXPIRE = 3600  # URL 만료 시간 (초)
# AWS_S3_USE_SSL = True  # SSL 사용 여부

# # 압축 관련 설정
# AWS_IS_GZIPPED = True  # gzip 압축 사용
# GZIP_CONTENT_TYPES = (
#     'text/css',
#     'text/javascript',
#     'application/javascript',
#     'application/x-javascript',
#     'image/svg+xml',
# )

# # 파일 덮어쓰기 설정
# AWS_S3_FILE_OVERWRITE = True  # 같은 이름 파일 덮어쓰기

# # 메모리 설정
# AWS_S3_MAX_MEMORY_SIZE = 0  # 메모리 사용량 제한